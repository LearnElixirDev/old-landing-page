svelte:window(on:scroll='onWindowScroll()', on:resize='onWindowResize()')

header.mdc-top-app-bar.mdc-elevation-transition(
  ref:header,
  class:mdc-elevation--z6='isPastTop',
  class:mdc-reverse-elevation--z6='isMobile',
  class:mdc-top-app-bar--fixed='isMobile'
)
  .mdc-top-app-bar__row
    .mdc-top-app-bar__section.justify-between
      a.w4.dn.db-ns(href='/')
        Icon(name='lure-logo' class='test')

      nav.h-100.h-auto-ns.w-100.w-auto-ns.flex.db-ns.justify-around.items-center
        a.mr4.link.gray.hover-washed-blue(href='/', class:washed-blue=`url === '/'`) Home
        a.mr4.link.gray.hover-washed-blue(href='/process', class:washed-blue=`url === '/process'`) Process
        a.mr4.link.gray.hover-washed-blue(href='/blog', class:washed-blue=`url === '/blog'`) Blog

        +if('isContactButtonVisible')
          MatButton
            a.white(href='/contact', class:washed-blue=`url === '/contact'`) Contact

          +else
            a.link.gray.hover-washed-blue(href='/contact', class:washed-blue=`url === '/contact'`) Contact

script.
  import './nav-bar.component.scss'

  import {MDCTopAppBar} from '@material/top-app-bar'

  import {Icon} from 'components/icon'
  import {MatButton} from 'components/mat-button'
  import {debounceTime} from 'helpers/util'

  let elementHeight = 64

  const isPastTop = () => window.scrollY > elementHeight

  const setPastTop = debounceTime(100, (getPastTop, setPastTop) => {
    const newPastTop = isPastTop()

    if (getPastTop() !== newPastTop)
      setPastTop(newPastTop)
  })

  const isMobile = () => window.innerWidth <= 600

  const setIsMobile = debounceTime(50, (getIsMobile, setIsMobile) => {
    const newIsMobile = isMobile()

    if (getIsMobile() !== newIsMobile)
      setIsMobile(newIsMobile)
  })

  export default {
    components: {MatButton, Icon},

    data() {
      return {
        isPastTop: isPastTop(),
        isMobile: isMobile(),
        url: location.pathname
      }
    },

    computed: {
      isContactButtonVisible: ({isPastTop, isMobile}) => !isMobile && isPastTop
    },

    oncreate() {
      MDCTopAppBar.attachTo(this.refs.header)
    },

    methods: {
      onWindowScroll() {
        setPastTop(
          () => this.get().isPastTop,
          (isPastTop) => this.set({isPastTop})
        )
      },

      onWindowResize() {
        setIsMobile(
          () => {
            if (isMobile)
              this.refs.header.style.removeProperty('top')

            this.get().isMobile
          },
          (isMobile) => this.set({isMobile})
        )
      }
    }
  }
