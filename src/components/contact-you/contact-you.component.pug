form.mt4(on:submit='onSubmit(event)')
  span.db.f3 Give us your name and phone number
and we will give you a call to discuss your
needs and expectations.
  +if('errorMessage')
    span.red.f3 {errorMessage}

  MatTextField(
    label='Full Name',
    name='name',
    autocomplete='name',
    required=true,
    className='w-100 w-75-ns',
    readonly='{isEmailSent}',
    on:change=`setUserInfo('name', event)`
  )

  MatTextField(
    type='tel',
    label='Phone Number',
    name='phone',
    autocomplete='tel',
    pattern='{telPattern}',
    className='w-100 w-75-ns mt3',
    readonly='{isEmailSent}',
    on:change=`setUserInfo('phoneNumber', event)`
  )

  .mt4.tc.tl-ns
    MatButton(
      type='submit',
      className='w-75 w-auto-ns',
      disabled='{shouldDisableButton}'
    )
      span {sendButtonText}

style.
  form {
    overflow-x: hidden;
  }

script.
  import {tap} from 'ramda'

  import {MatTextField, MatTextarea, MatButton} from 'components'
  import {sendEmail} from 'helpers/aws'
  import {sendEvent} from 'helpers/google-analytics'

  const ERRORS = {
    NO_CONTACT_METHOD: () => 'Must suply either a phone number or email',
    SERVER_ERROR: (error) => 'Server Error: ${error}'
  }

  export default {
    components: {MatTextField, MatTextarea, MatButton},

    data() {
      return {
        errorMessage: false,
        isSendingEmail: false,
        isEmailSent: false,
        title: 'Contact Us',
        telPattern: '([0-9]| |-){10,14}',
        messageInfo: {
          name: '',
          email: '',
          message: '',
          phoneNumber: ''
        }
      }
    },

    computed: {
      shouldDisableButton: ({isSendingEmail, isEmailSent}) => isSendingEmail || isEmailSent,
      sendButtonText: ({isSendingEmail, isEmailSent}) => {
        if (isSendingEmail)
          return 'Sending'
        else if (isEmailSent)
          return 'Sent'
        else
          return 'Send'
      }
    },

    methods: {
      setUserInfo(prop, {target}) {
        this.set({
          messageInfo: {
            ...this.get().messageInfo,
            [prop]: target.value
          }
        })
      },

      onSubmit(event) {
        event.preventDefault()

        const setErrorMessage = (errorMessage) => this.set({errorMessage})
        const {messageInfo: {email, phoneNumber, name, message}} = this.get()

        if (!email && !phoneNumber) {
          setErrorMessage(ERRORS.NO_CONTACT_METHOD())
        } else {
          const onError = tap((...args) => {
            sendEvent('Contact', 'Error', `Contact You via Phone - ${page}`)

            this.set({isSendingEmail: false})
          })

          const onSuccess = () => {
            sendEvent('Contact', 'Sent', `Contact You via Phone - ${page}`)

            this.set({
             isSendingEmail: false,
             isEmailSent: true
            })
          }

          this.set({isSendingEmail: true, errorMessage: ''})

          sendEvent('Contact', 'Sending', `Contact You via Phone - %${}page`)

          sendEmail(name, email, phoneNumber, message)
            .then(onSuccess, onError)
            .catch((err) => setErrorMessage(ERRORS.SERVER_ERROR(err)))
        }
      }
    }
  }
